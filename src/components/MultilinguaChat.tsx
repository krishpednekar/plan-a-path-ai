import React, { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { MessageSquare, Send, Bot, User, Globe, Sparkles } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ChatMessage {
  id: string;
  type: "user" | "ai";
  message: string;
  language: string;
  timestamp: Date;
}

const languages = [
  { code: "en", name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  { code: "hi", name: "Hindi", flag: "ЁЯЗоЁЯЗ│" },
  { code: "ur", name: "Urdu", flag: "ЁЯЗ╡ЁЯЗ░" },
  { code: "bn", name: "Bengali", flag: "ЁЯЗзЁЯЗй" },
];

const aiResponses = {
  en: [
    "ЁЯМЯ India is amazing! Would you prefer safari, hill stations, or cultural tourism?",
    "I'd recommend visiting during October-March for the best weather. What type of activities interest you?",
    "For adventure seekers, I suggest trekking in the Western Ghats or wildlife safaris in national parks.",
    "Cultural enthusiasts would love exploring ancient temples, local festivals, and traditional art forms."
  ],
  hi: [
    "ЁЯМЯ рднрд╛рд░рдд рдЕрджреНрднреБрдд рд╣реИ! рдХреНрдпрд╛ рдЖрдк рд╕рдлрд╛рд░реА, рд╣рд┐рд▓ рд╕реНрдЯреЗрд╢рди рдпрд╛ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдкрд░реНрдпрдЯрди рдкрд╕рдВрдж рдХрд░реЗрдВрдЧреЗ?",
    "рдореИрдВ рдЕрдХреНрдЯреВрдмрд░-рдорд╛рд░реНрдЪ рдХреЗ рджреМрд░рд╛рди рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ рдореМрд╕рдо рдХреЗ рд▓рд┐рдП рдпрд╛рддреНрд░рд╛ рдХреА рд╕рд▓рд╛рд╣ рджреВрдВрдЧрд╛ред рдЖрдкрдХреЛ рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХреА рдЧрддрд┐рд╡рд┐рдзрд┐рдпрд╛рдВ рдкрд╕рдВрдж рд╣реИрдВ?",
    "рд╕рд╛рд╣рд╕рд┐рдХ рдкреНрд░реЗрдорд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП, рдореИрдВ рдкрд╢реНрдЪрд┐рдореА рдШрд╛рдЯ рдореЗрдВ рдЯреНрд░реЗрдХрд┐рдВрдЧ рдпрд╛ рд░рд╛рд╖реНрдЯреНрд░реАрдп рдЙрджреНрдпрд╛рдиреЛрдВ рдореЗрдВ рд╡рдиреНрдпрдЬреАрд╡ рд╕рдлрд╛рд░реА рдХрд╛ рд╕реБрдЭрд╛рд╡ рджреЗрддрд╛ рд╣реВрдВред",
    "рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдЙрддреНрд╕рд╛рд╣реА рд▓реЛрдЧреЛрдВ рдХреЛ рдкреНрд░рд╛рдЪреАрди рдордВрджрд┐рд░реЛрдВ, рд╕реНрдерд╛рдиреАрдп рддреНрдпреЛрд╣рд╛рд░реЛрдВ рдФрд░ рдкрд╛рд░рдВрдкрд░рд┐рдХ рдХрд▓рд╛ рд░реВрдкреЛрдВ рдХреА рдЦреЛрдЬ рдХрд░рдирд╛ рдкрд╕рдВрдж рдЖрдПрдЧрд╛ред"
  ],
  ur: [
    "ЁЯМЯ █Б┘Ж╪п┘И╪│╪к╪з┘Ж ╪и█Б╪к ╪о┘И╪и╪╡┘И╪▒╪к █Б█Т! ┌й█М╪з ╪в┘╛ ╪│┘Б╪з╪▒█М╪М ┘╛█Б╪з┌С█М ┘Е┘В╪з┘Е╪з╪к╪М █М╪з ╪л┘В╪з┘Б╪к█М ╪│█М╪з╪н╪к ┘╛╪│┘Ж╪п ┌й╪▒█М┌║ ┌п█Т╪Я",
    "┘Е█М┌║ ╪и█Б╪к╪▒█М┘Ж ┘Е┘И╪│┘Е ┌й█Т ┘Д█М█Т ╪з┌й╪к┘И╪и╪▒ ╪│█Т ┘Е╪з╪▒┌Ж ╪к┌й ╪│┘Б╪▒ ┌й█М ╪к╪м┘И█М╪▓ ╪п┘И┌║ ┌п╪з█Ф ╪в┘╛ ┌й┘И ┌й╪│ ┘В╪│┘Е ┌й█М ╪│╪▒┌п╪▒┘Е█М╪з┌║ ┘╛╪│┘Ж╪п █Б█М┌║╪Я",
    "┘Е█Б┘Е ╪м┘И╪ж█М ┌й█Т ╪┤╪з╪ж┘В█М┘Ж ┌й█Т ┘Д█М█Т╪М ┘Е█М┌║ ┘Е╪║╪▒╪и█М ┌п┌╛╪з┘╣ ┘Е█М┌║ ┘╣╪▒█М┌й┘Ж┌п █М╪з ┘В┘И┘Е█М ┘╛╪з╪▒┌й┘И┌║ ┘Е█М┌║ ╪м┘Ж┌п┘Д█М ╪н█М╪з╪к ┌й█М ╪│┘Б╪з╪▒█М ┌й╪з ┘Е╪┤┘И╪▒█Б ╪п█М╪к╪з █Б┘И┌║█Ф",
    "╪л┘В╪з┘Б╪к█М ╪┤┘И┘В█М┘Ж ┘Д┘И┌п ┘В╪п█М┘Е ┘Е┘Ж╪п╪▒┘И┌║╪М ┘Е┘В╪з┘Е█М ╪к█Б┘И╪з╪▒┘И┌║╪М ╪з┘И╪▒ ╪▒┘И╪з█М╪к█М ┘Б┘Ж ┌й█М ╪к┘Д╪з╪┤ ┌й╪▒┘Ж╪з ┘╛╪│┘Ж╪п ┌й╪▒█М┌║ ┌п█Т█Ф"
  ],
  bn: [
    "ЁЯМЯ ржнрж╛рж░ржд ржЕрж╕рж╛ржзрж╛рж░ржг! ржЖржкржирж┐ рж╕рж╛ржлрж╛рж░рж┐, ржкрж╛рж░рзНржмрждрзНржп ржПрж▓рж╛ржХрж╛, ржирж╛ржХрж┐ рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржкрж░рзНржпржЯржи ржкржЫржирзНржж ржХрж░ржмрзЗржи?",
    "рж╕рзЗрж░рж╛ ржЖржмрж╣рж╛ржУржпрж╝рж╛рж░ ржЬржирзНржп ржЕржХрзНржЯрзЛржмрж░-ржорж╛рж░рзНржЪрзЗрж░ ржоржзрзНржпрзЗ ржнрзНрж░ржоржгрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрзЗржмред ржЖржкржирж╛рж░ ржХрзА ржзрж░ржирзЗрж░ ржХрж╛рж░рзНржпржХрж▓рж╛ржкрзЗ ржЖржЧрзНрж░рж╣?",
    "ржжрзБржГрж╕рж╛рж╣рж╕рж┐ржХржжрзЗрж░ ржЬржирзНржп, ржЖржорж┐ ржкрж╢рзНржЪрж┐ржоржШрж╛ржЯ ржкрж░рзНржмрждржорж╛рж▓рж╛ржпрж╝ ржЯрзНрж░рзЗржХрж┐ржВ ржмрж╛ ржЬрж╛рждрзАржпрж╝ ржЙржжрзНржпрж╛ржирзЗ ржмржирзНржпржкрзНрж░рж╛ржгрзА рж╕рж╛ржлрж╛рж░рж┐рж░ ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржЗред",
    "рж╕рж╛ржВрж╕рзНржХрзГрждрж┐ржХ ржЙрзОрж╕рж╛рж╣рзАрж░рж╛ ржкрзНрж░рж╛ржЪрзАржи ржоржирзНржжрж┐рж░, рж╕рзНржерж╛ржирзАржпрж╝ ржЙрзОрж╕ржм ржПржмржВ ржРрждрж┐рж╣рзНржпржмрж╛рж╣рзА рж╢рж┐рж▓рзНржкржХрж▓рж╛ ржЕржирзНржмрзЗрж╖ржг ржХрж░рждрзЗ ржкржЫржирзНржж ржХрж░ржмрзЗржиред"
  ]
};

export function MultilingualChat() {
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [selectedLanguage, setSelectedLanguage] = useState("en");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  useEffect(() => {
    // Welcome message when language changes
    if (messages.length === 0) {
      const welcomeMessages = {
        en: "Hello! I'm your AI travel assistant. Ask me about destinations, travel tips, or planning advice!",
        hi: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рдпрд╛рддреНрд░рд╛ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореБрдЭрд╕реЗ рдЧрдВрддрд╡реНрдп, рдпрд╛рддреНрд░рд╛ рдЯрд┐рдкреНрд╕, рдпрд╛ рдпреЛрдЬрдирд╛ рд╕рд▓рд╛рд╣ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ!",
        ur: "╪з┘Д╪│┘Д╪з┘Е ╪╣┘Д█М┌й┘Е! ┘Е█М┌║ ╪в┘╛ ┌й╪з AI ┘╣╪▒█М┘И┘Д ╪з╪│╪│┘╣┘Ж┘╣ █Б┘И┌║█Ф ┘Е╪м┌╛ ╪│█Т ┘Е┘Ж╪▓┘Д┘И┌║╪М ╪│┘Б╪▒█М ╪к╪м╪з┘И█М╪▓╪М █М╪з ┘Е┘Ж╪╡┘И╪и█Б ╪и┘Ж╪п█М ┌й█М ┘Е╪┤╪з┘И╪▒╪к ┌й█Т ╪и╪з╪▒█Т ┘Е█М┌║ ┘╛┘И┌Ж┌╛█М┌║!",
        bn: "рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ AI ржнрзНрж░ржоржг рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж╛ржХрзЗ ржЧржирзНрждржмрзНржп, ржнрзНрж░ржоржг ржЯрж┐ржкрж╕, ржмрж╛ ржкрж░рж┐ржХрж▓рзНржкржирж╛ ржкрж░рж╛ржорж░рзНрж╢ рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи!"
      };

      const welcomeMessage: ChatMessage = {
        id: "welcome",
        type: "ai",
        message: welcomeMessages[selectedLanguage as keyof typeof welcomeMessages],
        language: selectedLanguage,
        timestamp: new Date()
      };
      
      setMessages([welcomeMessage]);
    }
  }, [selectedLanguage]);

  const sendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: "user",
      message: inputMessage,
      language: selectedLanguage,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage("");
    setIsTyping(true);

    // Simulate AI response delay
    setTimeout(() => {
      const responses = aiResponses[selectedLanguage as keyof typeof aiResponses];
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      const aiMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: "ai",
        message: randomResponse,
        language: selectedLanguage,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
      
      toast({
        title: "AI Response Generated",
        description: `Replied in ${languages.find(l => l.code === selectedLanguage)?.name}`,
      });
    }, 1500);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-foreground">Multilingual AI Chat</h1>
          <p className="text-muted-foreground mt-1">
            Get travel assistance in your preferred language
          </p>
        </div>
        
        {/* Language Selector */}
        <div className="flex items-center space-x-3">
          <Globe className="h-5 w-5 text-muted-foreground" />
          <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
            <SelectTrigger className="w-40">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {languages.map((lang) => (
                <SelectItem key={lang.code} value={lang.code}>
                  <span className="flex items-center space-x-2">
                    <span>{lang.flag}</span>
                    <span>{lang.name}</span>
                  </span>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Chat Container */}
      <Card className="h-[600px] flex flex-col">
        <CardHeader className="flex-shrink-0 border-b">
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <MessageSquare className="h-5 w-5 text-primary" />
              <span>Chat with TourismAI</span>
            </div>
            <Badge variant="secondary" className="flex items-center space-x-2">
              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
              <span>Online</span>
            </Badge>
          </CardTitle>
        </CardHeader>
        
        {/* Messages */}
        <CardContent className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((msg) => (
            <div
              key={msg.id}
              className={`flex ${msg.type === "user" ? "justify-end" : "justify-start"}`}
            >
              <div className={`max-w-[80%] ${msg.type === "user" ? "order-2" : "order-1"}`}>
                <div
                  className={`rounded-2xl px-4 py-3 ${
                    msg.type === "user"
                      ? "bg-primary text-primary-foreground ml-4"
                      : "bg-secondary text-secondary-foreground mr-4"
                  }`}
                >
                  <p className="text-sm leading-relaxed">{msg.message}</p>
                  <p className="text-xs opacity-70 mt-1">{formatTime(msg.timestamp)}</p>
                </div>
              </div>
              
              <div className={`flex-shrink-0 ${msg.type === "user" ? "order-1" : "order-2"}`}>
                <div
                  className={`w-8 h-8 rounded-full flex items-center justify-center ${
                    msg.type === "user"
                      ? "bg-primary/20"
                      : "bg-secondary"
                  }`}
                >
                  {msg.type === "user" ? (
                    <User className="h-4 w-4" />
                  ) : (
                    <Bot className="h-4 w-4" />
                  )}
                </div>
              </div>
            </div>
          ))}
          
          {/* Typing indicator */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="flex items-center space-x-2 bg-secondary rounded-2xl px-4 py-3">
                <Bot className="h-4 w-4" />
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-pulse"></div>
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                  <div className="w-2 h-2 bg-muted-foreground rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </CardContent>
        
        {/* Input */}
        <div className="flex-shrink-0 border-t p-4">
          <div className="flex space-x-3">
            <Input
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={`Type your message in ${languages.find(l => l.code === selectedLanguage)?.name}...`}
              className="flex-1"
              disabled={isTyping}
            />
            <Button 
              onClick={sendMessage}
              disabled={!inputMessage.trim() || isTyping}
              size="icon"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="flex items-center justify-between mt-2 text-xs text-muted-foreground">
            <span>Press Enter to send, Shift+Enter for new line</span>
            <div className="flex items-center space-x-1">
              <Sparkles className="h-3 w-3" />
              <span>AI-powered responses</span>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}